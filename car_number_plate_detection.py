# -*- coding: utf-8 -*-
"""car_number_plate_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SE6YBoWiRXJqDGv3BSjKXIMA9xNre2Cw
"""

import cv2
import pytesseract

# Load an image from file or capture from a webcam
image = cv2.imread('car_image.jpg')

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Perform edge detection
edges = cv2.Canny(gray, 50, 150, apertureSize=3)

# Find contours in the edge-detected image
contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Filter and extract potential license plate regions
plate_regions = []
for contour in contours:
    if cv2.contourArea(contour) > 1000:
        x, y, w, h = cv2.boundingRect(contour)
        aspect_ratio = w / h
        if 2.5 < aspect_ratio < 4:
            plate_regions.append((x, y, w, h))

# Sort the potential plate regions by their x-coordinates
plate_regions = sorted(plate_regions, key=lambda x: x[0])

# Extract and recognize characters from the license plate
for x, y, w, h in plate_regions:
    plate = image[y:y + h, x:x + w]
    plate_text = pytesseract.image_to_string(plate)

    # Filter and clean recognized text (optional)
    plate_text = ''.join(filter(str.isalnum, plate_text))

    if plate_text:
        print(f"Detected license plate: {plate_text}")
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.putText(image, plate_text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

# Display the image with detected plates
cv2.imshow('Car Number Plate Detection', image)
cv2.waitKey(0)
cv2.destroyAllWindows()